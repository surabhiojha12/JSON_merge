import json
import os
import sys

def get_list_of_files_from_folder_path(folder_path):
    list_of_files = os.listdir(folder_path)     # collect list of files from the folder where all JSON files are stored
    list_of_files.sort()                        # sorting inorder to get 
    #print(list_of_files)
    return list_of_files

def get_files_with_input_file_base_name(list_of_files,input_file_base_name):
    files_with_base_name = []
    for input_file in list_of_files:
        if input_file.startswith(input_file_base_name):      # checks if the file name starts with input_file_base_name
            files_with_base_name.append(input_file)
    #print(files_with_base_name)
    return files_with_base_name

def get_merged_json_file(files_with_base_name,folder_path):
    input_json_object = {}
    output_json_object = {}
    for input_file in files_with_base_name:
        input_file_path = folder_path + '/' + input_file
        #print(os.path.getsize(input_file_path))
        with open(input_file_path,"r") as json_file:          # opens input_file as json_file 
                input_json_object = json.load(json_file)
                output_json_object = merge_input_json_file_in_output_json_file(input_json_object,output_json_object)
    return output_json_object
                  

def merge_input_json_file_in_output_json_file(input_json_object,output_json_object):
    for key in input_json_object:
        if output_json_object.get(key):
            output_json_object = append_existing_key_value_in_output_json_object(input_json_object,key,output_json_object)
        else:
            output_json_object = create_new_key_value_pair_in_output_json_object(input_json_object,key,output_json_object)
    return output_json_object

def create_new_key_value_pair_in_output_json_object(input_json_object,key,output_json_object):
    output_json_object[key] = input_json_object[key]
    return output_json_object

def append_existing_key_value_in_output_json_object(input_json_object,key,output_json_object):
    for entries in input_json_object.get(key): # get the  entries of the value of the given key
        output_json_object[key].append(entries)
    return output_json_object


def user_input_collector():
    folder_path = " "  # The folder where all the JSON files are stored.
    input_file_base_name = ""       # The common prefix all file names share.
    output_file_base_name = ""      # The prefix for the merged file name generated by the merge utility
    max_file_size = 0               # The maximum file size (in bytes) that each merged file is allowed to be

    print("Enter the folder path where all JSON fles are stored ")
    #print("Path should be of the format C:\\\mydir or C:/mydir Example C:/Users\\SURABHI\\Desktop\\FW-SE-JSON-Merge\\json_files ")
    folder_path = input()
    print("Enter The common prefix all input file name share - INPUT FILE BASE NAME")
    input_file_base_name = input()
    print("Enter The prefix for the merged file name - OUTPUT FILE BASE NAME")
    output_file_base_name = input()
    print("Enter The maximum file size (in bytes) that each merged file is allowed to be")
    max_file_size = int(input())
    return folder_path,input_file_base_name,output_file_base_name,max_file_size

def creating_merge_file_as_large_as_possible(output_file_path,output_json_object,max_file_size):
    indent_size = 0
    while(os.path.getsize(output_file_path) < max_file_size):
        with open(output_file_path, 'w', encoding='utf-8') as output_file:
            json.dump(output_json_object,output_file,ensure_ascii = False,indent=indent_size)
        indent_size = indent_size + 1
    
    while(os.path.getsize(output_file_path) > max_file_size):
        indent_size = indent_size - 1
        with open(output_file_path, 'w', encoding='utf-8') as output_file:
            json.dump(output_json_object,output_file,ensure_ascii = False,indent=indent_size)
    #print(os.path.getsize(output_file_path))

def write_the_json_merged_object_to_ouput_json_file(output_json_object,output_file_base_name,folder_path,max_file_size):
    counter = '1' # for counter to output_file_base_name
    output_file_path = folder_path + '\\' + output_file_base_name + counter + '.json'
    with open(output_file_path, 'w', encoding='utf-8') as output_file:
        json.dump(output_json_object,output_file,ensure_ascii = False,indent=2) #ensure_ascii = False allows to merge the non ascii characters too
    #print(os.path.getsize(output_file_path))

    if(os.path.getsize(output_file_path) < max_file_size):
        creating_merge_file_as_large_as_possible(output_file_path,output_json_object,max_file_size)
        


def json_merge_program_controller():
    folder_path = ''
    input_file_base_name = ''
    output_file_base_name = ''
    max_file_size = ''
    list_of_files = []
    files_with_base_name = []
    output_json_object = {}

    folder_path,input_file_base_name,output_file_base_name,max_file_size = user_input_collector() # collects user input
    if os.path.exists(folder_path):
        list_of_files = get_list_of_files_from_folder_path(folder_path)                               # collects list of files in folder path
        if(len(list_of_files) > 0):
            files_with_base_name = get_files_with_input_file_base_name(list_of_files,input_file_base_name)# collects list of files with input_file_base_name 
            if(len(files_with_base_name) > 0):
                output_json_object = get_merged_json_file(files_with_base_name,folder_path)                    # reads the json files with input_file_base_name
                write_the_json_merged_object_to_ouput_json_file(output_json_object,output_file_base_name,folder_path,max_file_size)
                print("MERGE FILE GENERATED")
            else:
                print("The folder path does not contain file with INPUT FILE BASE NAME ")
        else:
            print("The given folder path does not conatin any files")
    else:
        print("Provided Folder path does not exists")


json_merge_program_controller()




